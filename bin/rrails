#!/usr/bin/env ruby

$:.unshift File.expand_path('../../lib', __FILE__)

# goto project root
while not File.exists?('Gemfile') do
  Dir.chdir('..')
  break if Dir.pwd == '/'
end
if not File.exists?('Gemfile')
  raise RuntimeError.new('Can not locate project root')
end

# parse options
require 'optparse'
options = { ondemand: true }
opts = OptionParser.new
opts.banner =<<'!'
Usage: rrails [options] [-- rails_or_rake_cmds]
       rrails [options] start | stop | restart | reload | status
       rrails shellrc
       rrails --help

Options:
!
opts.on('-E', '--rails_env=s', 'Set Rails env.')      {|v| options[:rails_env] = v}
opts.on('-s', '--socket=s', 'Set RRails server socket file.') {|v| options[:socket] = v}
opts.on('-o', '--[no-]ondemand', '(Client) Start RRails server on demand. Default: true.') {|v| options[:ondemand] = v}
opts.on('-t', '--[no-]pty', "(Client) Prepare a PTY. Default: decided by commands.")  {|v| options[:pty] = v }
opts.on('-l', '--logfile=s', '(Server) Set log file path. Default: (stderr).') {|v| options[:logfile] = v}
opts.on('-p', '--pidfile=s', '(Server) Set RRails server pidfile file.') {|v| options[:pidfile] = v}
opts.on('-b', '--[no-]background', '(Server) Run in background.') {|v| options[:background] = v}
opts.parse!(ARGV)

# run client or server
case ARGV.first
when nil, ''
  # show help
  STDERR.puts opts
when /^s(erver)$/
when 'start', 'stop', 'reload', 'restart', 'status'
  # server
  require 'rrails/server'
  RemoteRails::Server.new(options).send(ARGV.first)
when /shellrc/
  # shell rc
  rc = <<-"!"
    rrails-exec() {
        if [ -e config/environment.rb ]; then
            "#{__FILE__}" -- "$@"
        else
            command "$@"
        fi
    }
    alias rrails="#{__FILE__}"
    alias rails='rrails-exec rails'
    alias rake='rrails-exec rake'
  !
  rc.gsub! /^    /, ''
  puts rc
else
  # check server and start server on demand
  if options[:ondemand]
    options[:ondemand_callback] = proc do
      require 'rrails/server'
      require 'bundler/setup'
      options[:background] = true
      server = RemoteRails::Server.new(options)
      if not server.alive?
        puts 'Starting RRails server on demand ...'
        server.start
        sleep 1 while not server.alive?
      end
    end
  end

  # start client
  require 'rrails/client'
  require 'shellwords'

  options[:cmd] = Shellwords.join(ARGV)
  exitcode = RemoteRails::Client.new(options).run
  exit exitcode
end

